//
//  FuncLoginViewController.swift
//  Navigation
//
//  Created by –õ–∞—Ä–∏—Å–∞ –¢–µ—Ä–µ–≥—É–ª–æ–≤–∞ on 03.02.2023.
//

import UIKit

extension LogInViewController {
    @objc func buttonPressed() {
        let checkTextFields = checkTextFields()
        if checkTextFields {
            let profileViewController = ProfileViewController() //–°–æ–∑–¥–∞–µ–º –≤—å—é –∫—É–¥–∞ –±—É–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
            self.navigationController?.pushViewController(profileViewController, animated: true) //–¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤–æ –≤—å—é —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            }
    }
    
    func checkTextFields() -> Bool {
        if emailField.text == ""  {
            UIView.animate(withDuration: 0.5, delay: 0.3) {
                self.emailField.backgroundColor = UIColor(named: "errorFieldColor")
                self.emailField.shake()
        } completion: { _ in
            UIView.animate(withDuration: 0.5, delay: 0.3) {
                self.emailField.backgroundColor = .clear
            }}
        return false
        } else if passwordField.text == "" {
            UIView.animate(withDuration: 0.5, delay: 0.3) {
                self.passwordField.backgroundColor = UIColor(named: "errorFieldColor")
                self.passwordField.shake()
        } completion: { _ in
            UIView.animate(withDuration: 0.5, delay: 0.3) {
                self.passwordField.backgroundColor = .clear
            }}
        return false
        } else if passwordField.text != "" && !checkCountSymbolsPassword() {
            return false
        } else if !checkCorrectData() {
            return false
        }
    return true
} 
    
    func checkCountSymbolsPassword() -> Bool {
        lazy var minCount: Int = 6
        lazy var countSymbols: Int = passwordField.text!.count
        if countSymbols < minCount {
            UIView.animate(withDuration: 1, delay: 0.1) {
                self.errorPassword.text = "–ù–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
                self.errorPassword.isHidden = false
                self.passwordField.rightView = self.errorPassword
                self.passwordField.shake()
                self.passwordField.backgroundColor = UIColor(named: "errorFieldColor")
            } completion: { _ in
                UIView.animate(withDuration: 1, delay: 0.1) {
                    self.errorPassword.isHidden = true
                    self.passwordField.backgroundColor = .clear
                }
            }
            return false
        }
        return true
    } //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    
    func checkCorrectData() -> Bool {
        if emailField.text != "" && emailField.text != "la@ma.ru" {
            UIView.animate(withDuration: 1, delay: 0.3) {
                let alert = UIAlertController(title: "–ù–µ–≤–µ—Ä–Ω—ã–π email", message: "–ê —ç—Ç–æ –≤–µ—Ä–Ω—ã–π: la@ma.ru", preferredStyle: .alert)
                let choice = UIAlertAction(title: "–Ø –ø–æ–Ω—è–ªüëå", style: .cancel)
                alert.addAction(choice)
                self.present(alert, animated: true)
            }
            return false
        } else if passwordField.text != "" && passwordField.text != "123456" {
            UIView.animate(withDuration: 1, delay: 0.3) {
                let alert = UIAlertController(title: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", message: "–¢–≤–æ–π –ø–∞—Ä–æ–ª—å 123456", preferredStyle: .alert)
                let choice = UIAlertAction(title: "–ü—Ä–∏–Ω—è—Ç–æü´°", style: .cancel)
                alert.addAction(choice)
                self.present(alert, animated: true)
            }
            return false
        }
        return true
    } //–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
}

extension UITextField {
      func shake() {
          let shakeAnimation = CABasicAnimation(keyPath: "position")
          shakeAnimation.duration = 0.05
          shakeAnimation.repeatCount = 6
          shakeAnimation.autoreverses = true
          shakeAnimation.fromValue = CGPoint(x: self.center.x - 4, y: self.center.y)
          shakeAnimation.toValue = CGPoint(x: self.center.x + 4, y: self.center.y)
          layer.add(shakeAnimation, forKey: "position")
      }
  }

